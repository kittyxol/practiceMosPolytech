import os
from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from db import init_db, add_class, get_schedule, clear_schedule
from dotenv import load_dotenv
from datetime import datetime, timedelta

load_dotenv()
TOKEN = "7068683215:AAHHTm7NX_z2T0OW-4k_73D4MbCb9v3ZsKM"

init_db()

WEEKDAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
user_states = {}

init_db()


async def start(update, context):
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É")],
        [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä üòä", reply_markup=reply_markup)


async def handle_text(update, context):
    chat_id = str(update.message.chat.id)
    text = update.message.text.strip()

    print(f"Received text: {text}")  

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É":
        user_states[chat_id] = {"step": "choose_day"}
        keyboard = [[KeyboardButton(day.title())] for day in WEEKDAYS]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)
        return

    if text in WEEKDAYS:
        print(f"Day selected: {text}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        if chat_id not in user_states or user_states[chat_id].get("step") != "choose_day":
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        user_states[chat_id] = {"step": "enter_name", "day": text}
        print(f"User state after choosing day: {user_states[chat_id]}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã:", reply_markup=ReplyKeyboardRemove())
        return


    if user_states.get(chat_id, {}).get("step") == "enter_name":
        print(f"User state before entering name: {user_states[chat_id]}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã
        user_states[chat_id]["name"] = text
        user_states[chat_id]["step"] = "enter_time"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    if user_states.get(chat_id, {}).get("step") == "enter_time":
        try:
            time = text.strip()
            user_states[chat_id]["time"] = time
            user_states[chat_id]["step"] = "enter_notify"
            await update.message.reply_text("–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10, 30, 60)")
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
        return


    if user_states.get(chat_id, {}).get("step") == "enter_notify":
        try:
            notify = int(text)
            user_states[chat_id]["notify"] = notify

            add_class(chat_id, user_states[chat_id]["day"], user_states[chat_id]["name"], user_states[chat_id]["time"], notify)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            del user_states[chat_id]  
            
            keyboard = [
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É")],
                [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–∞—Ä—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).")
        return

    if text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule = get_schedule(chat_id)
        if schedule:
            schedule_text = "\n".join([f"{item['day']} - {item['name']} –≤ {item['time']} (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {item['notify']} –º–∏–Ω—É—Ç)"
                                      for item in schedule])
            await update.message.reply_text(f"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{schedule_text}")
        else:
            await update.message.reply_text("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.")
        return


    if text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë":
        clear_schedule(chat_id)
        await update.message.reply_text("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.")
        return


    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def error_handler(update, context):
    print(f"Error: {context.error}")  


application = ApplicationBuilder().token(TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_error_handler(error_handler)  
application.run_polling()